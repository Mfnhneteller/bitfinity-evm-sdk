type AccessListItem = record { storageKeys : vec text; address : text };
type Account = record { owner : principal; subaccount : opt vec nat8 };
type BasicAccount = record { balance : text; nonce : text };
type Block = record {
    miner : text;
    totalDifficulty : text;
    receiptsRoot : text;
    stateRoot : text;
    hash : text;
    difficulty : text;
    size : opt text;
    uncles : vec text;
    baseFeePerGas : opt text;
    extraData : text;
    sealFields : vec text;
    transactionsRoot : text;
    sha3Uncles : text;
    nonce : text;
    number : text;
    timestamp : text;
    transactions : vec text;
    gasLimit : text;
    logsBloom : text;
    parentHash : text;
    gasUsed : text;
    mixHash : text;
};
type BlockResult = variant {
    NoBlock;
    WithHash : Block;
    WithTransaction : Block_1;
};
type Block_1 = record {
    miner : text;
    totalDifficulty : text;
    receiptsRoot : text;
    stateRoot : text;
    hash : text;
    difficulty : text;
    size : opt text;
    uncles : vec text;
    baseFeePerGas : opt text;
    extraData : text;
    sealFields : vec text;
    transactionsRoot : text;
    sha3Uncles : text;
    nonce : text;
    number : text;
    timestamp : text;
    transactions : vec Transaction;
    gasLimit : text;
    logsBloom : text;
    parentHash : text;
    gasUsed : text;
    mixHash : text;
};
type EvmError = variant {
    Internal : text;
    TransactionSignature : text;
    StableStorageError : text;
    InsufficientBalance : record { actual : text; expected : text };
    TransactionPool : TransactionPoolError;
    NotAuthorized;
    Token : TxError;
    BlockDoesNotExist : text;
    NoHistoryDataForBlock : text;
    UnexpectedNonce;
    InvalidGasPrice : text;
    NotProcessableTransactionError : HaltError;
    RegistrationCheckFailed;
    FatalEvmExecutorError : ExitFatal;
};
type EvmStats = record {
    block_number : nat64;
    cycles : nat64;
    chain_id : nat64;
    pending_transactions : vec Transaction;
    pending_transactions_count : nat64;
    block_gas_limit : nat64;
    state_root : text;
    native_token_info : ICTokenInfo;
};
type EvmcInitData = record {
    permissions : opt vec record { principal; vec Permission };
    network : text;
    min_gas_price : nat;
    native_token_principal : principal;
    signature_verification_principal : principal;
    log_settings : opt LogSettings;
    native_token_standard : text;
};
type ExitFatal = variant {
    UnhandledInterrupt;
    NotSupported;
    Other : text;
    CallErrorAsFatal : HaltError;
};
type HaltError = variant {
    DesignatedInvalid;
    OutOfOffset;
    Continue;
    CallGasCostMoreThanGasLimit;
    InvalidChainId;
    Revert : opt text;
    InvalidRange;
    CreateContractLimit;
    CallerGasLimitMoreThanBlock;
    InvalidOpcode;
    StateChangeDuringStaticCall;
    CreateEmpty;
    LackOfFundForGasLimit;
    InvalidCode : nat8;
    GasPriceLessThanBasefee;
    InvalidJump;
    OutOfFund;
    NonceTooLow;
    PrecompileError;
    OpcodeNotFound;
    NotActivated;
    PCUnderflow;
    OverflowPayment;
    PrevrandaoNotSet;
    OutOfGas;
    Other : text;
    CallNotAllowedInsideStatic;
    NonceTooHigh;
    RejectCallerWithCode;
    CallTooDeep;
    NonceOverflow;
    FatalExternalError;
    GasMaxFeeGreaterThanPriorityFee;
    CreateContractWithEF;
    CreateCollision;
    StackOverflow;
    CreateInitcodeSizeLimit;
    StackUnderflow;
};
type HttpRequest = record {
    url : text;
    method : text;
    body : vec nat8;
    headers : vec record { text; text };
};
type HttpResponse = record {
    body : vec nat8;
    headers : vec record { text; text };
    upgrade : opt bool;
    streaming_strategy : opt StreamingStrategy;
    status_code : nat16;
};
type ICTokenInfo = record { "principal" : principal; standard : text };
type Interval = variant {
    PerHour;
    PerWeek;
    PerDay;
    Period : record { seconds : nat64 };
    PerMinute;
};
type LogSettings = record {
    log_filter : opt text;
    in_memory_records : opt nat64;
    enable_console : bool;
};
type MetricsData = record {
    stable_memory_size : nat64;
    cycles : nat64;
    heap_memory_size : nat64;
};
type MetricsMap = record {
    map : vec record { nat64; MetricsData };
    interval : Interval;
    history_length_nanos : nat64;
};
type MetricsStorage = record { metrics : MetricsMap };
type Permission = variant { ReadLogs; Admin; UpdateLogsConfiguration };
type PermissionList = record { permissions : vec Permission };
type Result = variant { Ok : text; Err : EvmError };
type Result_1 = variant { Ok : text; Err : EvmError };
type Result_10 = variant { Ok : Account; Err : EvmError };
type Result_2 = variant { Ok : BlockResult; Err : EvmError };
type Result_3 = variant { Ok : nat64; Err : EvmError };
type Result_4 = variant { Ok : opt Transaction; Err : EvmError };
type Result_5 = variant { Ok : opt TransactionReceipt; Err : EvmError };
type Result_6 = variant { Ok : vec text; Err : EvmError };
type Result_7 = variant { Ok : PermissionList; Err : EvmError };
type Result_8 = variant { Ok : EvmStats; Err : EvmError };
type Result_9 = variant { Ok; Err : EvmError };
type StreamingStrategy = variant {
    Callback : record { token : record {}; callback : func() -> () };
};
type Transaction = record {
    r : text;
    s : text;
    v : text;
    to : opt text;
    gas : text;
    maxFeePerGas : opt text;
    gasPrice : opt text;
    value : text;
    blockNumber : opt text;
    from : text;
    hash : text;
    blockHash : opt text;
    "type" : opt text;
    accessList : opt vec AccessListItem;
    transactionIndex : opt text;
    nonce : text;
    maxPriorityFeePerGas : opt text;
    input : text;
    chainId : opt text;
};
type TransactionParams = record {
    value : text;
    from : text;
    nonce : text;
    gas_limit : nat64;
    gas_price : opt text;
};
type TransactionPoolError = variant {
    InvalidNonce : record { actual : text; expected : text };
    TransactionAlreadyExists;
    TxReplacementUnderpriced;
    TooManyTransactions;
};
type TransactionReceipt = record {
    to : opt text;
    status : opt text;
    output : opt vec nat8;
    transactionHash : text;
    cumulativeGasUsed : text;
    blockNumber : text;
    from : text;
    logs : vec TransactionReceiptLog;
    blockHash : text;
    root : opt text;
    "type" : opt text;
    transactionIndex : text;
    effectiveGasPrice : opt text;
    logsBloom : text;
    contractAddress : opt text;
    gasUsed : opt text;
};
type TransactionReceiptLog = record {
    transactionHash : text;
    blockNumber : text;
    data : text;
    blockHash : text;
    transactionIndex : text;
    topics : vec text;
    address : text;
    logIndex : text;
    removed : bool;
};
type TxError = variant {
    SelfTransfer;
    NothingToClaim;
    AccountNotFound;
    Duplicate : record { duplicate_of : nat64 };
    BadFee : record { expected_fee : nat };
    Unauthorized;
    CreatedInFuture : record { ledger_time : nat64 };
    TooOld : record { allowed_window_nanos : nat64 };
    AmountOverflow;
    InsufficientFunds : record { balance : nat };
    AmountTooSmall;
};
service : (EvmcInitData) -> {
    get_curr_metrics : () -> (MetricsData) query;
    get_metrics : () -> (MetricsStorage) query;
    account_basic : (text) -> (BasicAccount) query;
    call_message : (TransactionParams, text, text) -> (Result);
    create_contract : (TransactionParams, text) -> (Result);
    deposit_account : () -> (Account) query;
    deposit_tokens : (text, text) -> (Result_1);
    eth_accounts : () -> (vec text) query;
    eth_block_number : () -> (nat64) query;
    eth_call : (opt text, opt text, opt text, nat64, opt text, opt text) -> (
        Result_1
    ) query;
    eth_chain_id : () -> (nat64) query;
    eth_estimate_gas : (text, opt text, nat64, text, text) -> (Result_1) query;
    eth_get_balance : (text, text) -> (Result_1) query;
    eth_get_block_by_hash : (text, bool) -> (Result_2) query;
    eth_get_block_by_number : (text, bool) -> (Result_2) query;
    eth_get_block_transaction_count_by_block_number : (text) -> (Result_3) query;
    eth_get_block_transaction_count_by_hash : (text) -> (nat64) query;
    eth_get_block_transaction_count_by_number : (text) -> (Result_3) query;
    eth_get_code : (text, text) -> (Result_1) query;
    eth_get_storage_at : (text, text, text) -> (Result_1) query;
    eth_get_transaction_by_block_hash_and_index : (text, nat64) -> (
        opt Transaction
    ) query;
    eth_get_transaction_by_block_number_and_index : (text, nat64) -> (
        Result_4
    ) query;
    eth_get_transaction_by_hash : (text) -> (opt Transaction) query;
    eth_get_transaction_count : (text, text) -> (Result_1) query;
    eth_get_transaction_receipt : (text) -> (Result_5) query;
    eth_hashrate : () -> (nat64) query;
    eth_mining : () -> (bool) query;
    eth_protocol_version : () -> (nat64) query;
    eth_syncing : () -> (bool) query;
    get_block_gas_limit : () -> (nat64) query;
    get_history_size : () -> (nat64) query;
    get_min_gas_price : () -> (text) query;
    get_native_token_info : () -> (ICTokenInfo) query;
    get_tx_indexes : () -> (vec text) query;
    http_request : (HttpRequest) -> (HttpResponse) query;
    http_request_update : (HttpRequest) -> (HttpResponse);
    ic_logs : (nat64) -> (Result_6);
    ic_permissions_add : (principal, vec Permission) -> (Result_7);
    ic_permissions_get : (principal) -> (Result_7) query;
    ic_permissions_remove : (principal, vec Permission) -> (Result_7);
    ic_stats : () -> (Result_8) query;
    is_address_registered : (text) -> (bool) query;
    mint_evm_tokens : (text, text) -> (Result_1);
    net_listening : () -> (bool) query;
    net_peer_count : () -> (nat64) query;
    net_version : () -> (nat64) query;
    register_ic_agent : (Transaction) -> (Result_9);
    send_raw_transaction : (Transaction) -> (Result_1);
    set_block_gas_limit : (nat64) -> (Result_9);
    set_history_size : (nat64) -> (Result_9);
    set_logger_filter : (text) -> (Result_9);
    set_min_gas_price : (text) -> (Result_9);
    token_deposit_account : () -> (Result_10) query;
    verify_registration : (vec nat8) -> (Result_9);
    web3_client_version : () -> (text) query;
    web3_sha3 : (text) -> (Result_1) query;
    withdraw_tokens : (text, opt vec nat8, text) -> (Result_1);
};
